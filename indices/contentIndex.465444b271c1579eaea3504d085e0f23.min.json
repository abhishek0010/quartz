{"/":{"title":"🪴 Quartz 3.3","content":"\nHost your second brain and [digital garden](https://jzhao.xyz/posts/networked-thought) for free. Quartz features\n\n1. Extremely fast natural-language [[notes/search]]\n2. Customizable and hackable design based on [Hugo](https://gohugo.io/)\n3. Automatically generated backlinks, link previews, and local graph\n4. Built-in [[notes/CJK + Latex Support (测试) | CJK + Latex Support]] and [[notes/callouts | Admonition-style callouts]]\n5. Support for both Markdown Links and Wikilinks\n\nCheck out some of the [amazing gardens that community members](notes/showcase.md) have published with Quartz or read about [why I made Quartz](notes/philosophy.md) to begin with.\n\n## Get Started\n\u003e 📚 Step 1: [Setup your own digital garden using Quartz](notes/setup.md)\n\nReturning user? Figure out how to [[notes/updating|update]] your existing Quartz garden.\n\nIf you prefer browsing the contents of this site through a list instead of a graph, you see a list of all [setup-related notes](/tags/setup).\n\n### Troubleshooting\n- 🚧 [Troubleshooting and FAQ](notes/troubleshooting.md)\n- 🐛 [Submit an Issue](https://github.com/jackyzha0/quartz/issues)\n- 👀 [Discord Community](https://discord.gg/cRFFHYye7t)\n\n### NEW SECTION\n\n- [[Javascript]]\n\n","lastmodified":"2023-07-13T10:11:59.165363134Z","tags":[]},"/Javascript":{"title":"Javascript","content":"\u003cdiv\u003e\n\n# Javascripts notes\n\n\u003c/div\u003e\n\n-----------------\nDate Modified : `16-12-2022`\n\nTags: #javascript  #languages #publish\n\n\n----------------------------\n# `Javascript.\n\n## To Prepare\nFrameworks Explainers:\n- [[ReactJS]]\n- [[NextJS]]\n\nPackage Managers:\n- [[npm]]\n- [[yarn]]\n\nBundler:\n- [[webpack]]\n- [[ViteJS]]\n\nPackages notes:\n- [[ESLint]]\n- [[NX]]\n\nCSS \n- [[PostCSS]]\n\nTesting [Automated testing with Mocha](https://javascript.info/testing-mocha)\n- Mocha\n- Chai\n- Sinon\n\n## TO LEARN\n- Decorators [Decorators and forwarding, call/apply](https://javascript.info/call-apply-decorators)\n- factories\n- template literals [Template literals (Template strings) - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates)\n- [Garbage collection](https://javascript.info/garbage-collection)\n\n\n## Summarize\n- [Constructor, operator \"new\"](https://javascript.info/constructor-new) Using Typescript instead\n- [Symbol type](https://javascript.info/symbol) Another type to create unique string, not accessable by object property iterator\n- \n## Introduction\nJavaScript is a _synchronous_ [[programming language]]. But thanks to callback functions we can make it function like an _asynchronous_ programming language.\n\nGood resources that show the current state of support for various features:\n\n-   [https://kangax.github.io/compat-table/es6/](https://kangax.github.io/compat-table/es6/) – for pure JavaScript.\n-   [https://caniuse.com/](https://caniuse.com/) – for browser-related functions.\n## Syntax\nSyntax can be found in [[Syntax-JS]]\n\n## Variable Declaration \u0026 Types\n- `var` has global scope outside and within blocks\n- Use `let` \u0026 `const` which create [temporal dead zones](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz) , which throws `ReferenceError`, when used outside scope. Different from `var` which throws `undefined` as value.\n### var vs let, const\n- **`var` has no block scope(like if , for blocks etc)**, it has `function and global scope` but it ignore block scope, unlinke `let` \u0026 `const` (For this reasom IIEF were used to block scope of `var`)\n- **`var` tolerates redeclerations**, unlike `let ` \u0026 `const` which throws redecleration errors\n- **`var`  variables can be used before initializations** (also called `hoisting`) which is dangerous if declared in block scope. NOTE -  d`eclerations are hoisted but initializations are not.`\n- Convention to use `camelCase` for let and `UPPER_CASE` for const.\n\n### Primitive Types\nThere are 8 data types:\n\n-   `number` for both floating-point and integer numbers,\n-   `bigint` for integer numbers of arbitrary length,\n-   `string` for strings,\n-   `boolean` for logical values: `true/false`,\n-   `null` – a type with a single value `null`, meaning “empty” or “does not exist”,\n-   `undefined` – a type with a single value `undefined`, meaning “not assigned”,\n-   `object` and `symbol` – for complex data structures and unique identifiers, we haven’t learnt them yet.\n\nThe `typeof` operator returns the type for a value, with two exceptions:\n\n```javascript\ntypeof null == \"object\" // error in the language\ntypeof function(){} == \"function\" // functions are treated specially\n```\n### Wrapper for primitives(Refer [[Data Types in JS]])\n\n- Except `undefined` \u0026 `null`, all other primitive types have wrapper methods.\n-   Formally, these methods work via temporary objects, but JavaScript engines are well tuned to optimize that internally, so they are not expensive to call.\n## Types of quotes\n- `' '` \u0026 `\" \"` are normal quotes, where ` `` ` used for functional expressions.\n- Mainly used for strings, refer [[Data Types in JS#^aca574]]\n\n## Type Conversions\nThe three most widely used type conversions are to string, to number, and to boolean.\n\n**`String Conversion`** – Occurs when we output something. Can be performed with `String(value)`. The conversion to string is usually obvious for primitive values.\n\n**`Numeric Conversion`** – Occurs in math operations. Can be performed with `Number(value)`.\n\nThe conversion follows the rules:\n- `undefined` = `NaN`\n- `null` = `0`\n- `true / false` = `1 / 0`\n- `string` = The string is read “as is”, whitespaces (includes spaces, tabs `\\t`, newlines `\\n` etc.) from both sides are ignored. An empty string becomes `0`. An error gives `NaN`.\n\n**`Boolean Conversion`** – Occurs in logical operations. Can be performed with `Boolean(value)`.\n\nFollows the rules:\n- `0`, `null`, `undefined`, `NaN`, `\"\"` = `false`\n- any other value = `true`\n\nMost of these rules are easy to understand and memorize. The notable exceptions where people usually make mistakes are:\n\n-   `undefined` is `NaN` as a number, not `0`.\n-   `\"0\"` and space-only strings like `\" \"` are true as a boolean.\n\n## Comparison and Difference Between == and === in Javascript\n\nS.no |  == | === \n-----|-----|----\n1 |Compares two operands | Compares two operands\n2 | returns _true_ if operands have the same data type and same value, returns _false_ if the values differ. | returns _true_ only if operands are of same data type and same value, otherwise returns _false_\n3 | In case both operands are of different data types, it performs type conversion of one operand in order to make the data types of the operands the same. | In case both operands are of different data type, it doesn't perform type conversion of the operands.\n4 | Also known as _loose equality_ | Also known as _strict equality_\n5 | Follows abstract equality comparison algorithm | Follows strict equality comparison algorithm\n\n## `\u0026\u0026` , `||` \u0026 `??`\n- Returns first falsy value\n- returns first truthy value\n- refurns first defined value\n\n## Objects\n### Introduction\n- Objects are `collection of properties.`(Like a key value pair)\n- An object can be created with figure brackets `{…}` with an optional list of _properties_. A property is a “key: value” pair, where `key` is a string (also called a “property name”), and `value` can be anything.\n- An `empty object` can be created using one of two syntaxes:\n```javascript\nlet user = new Object(); // \"object constructor\" syntax\nlet user = {};  // \"object literal\" syntax\n```\n- Its `property can also contain another object`\n- Properties can be accessed using `.` notation\n- To remove a property, we can use the `delete` operator:\n```javascript\ndelete user.age;\n```\n- The last property in the list may end with a `comma:`\n\n```javascript\nlet user = {\n  name: \"John\",\n  age: 30,\n}\n```\n\nThat is called a “trailing” or “hanging” comma. Makes it easier to add/remove/move around properties, because all lines become alike.\n- We can use both normal properties and `shorthands` in the same object:\n\n```javascript\nlet user = {\n  name,  // same as name:name\n  age: 30\n};\n```\n\n- All objects have [[Javascript Prototypes]]\n\n- Nonexistent properties of an object have value [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) (and not [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null)).\n- `in`  \u0026 `for..in` keywords are used for accessing object properties. Refer [[Syntax-JS#^696138]]\n- Methods can also be added as properties of an object\n- Prototypes can act as an inheritence feature\n- GEters and setters can also be added within a method\n\n### Object Copying and Referencing\n- **A variable assigned to an object stores not the object itself, but its “address in memory” – in other words “a reference” to it.**\n- **When an object variable is copied, the reference is copied, but the object itself is not duplicated.**\n\n### Object cloning and merging, `Object.assign`\n```javascript\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\nlet clone = {}; // the new empty object\n\n// let's copy all user properties into it\nfor (let key in user) {\n  clone[key] = user[key];\n}\n\n// now clone is a fully independent object with the same content\nclone.name = \"Pete\"; // changed the data in it\n\nalert( user.name ); // still John in the original object\n```\n\nWe also can use `Object.assign` to perform a simple object cloning:\n\n```javascript\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\nlet clone = Object.assign({}, user);\n\nalert(clone.name); // John\nalert(clone.age); // 30\n```\nThere are also other methods of cloning an object, e.g. using the [spread syntax](https://javascript.info/rest-parameters-spread) `clone = {...user}`, covered later in the tutorial.\n### Multi word keys(`[]` notation)\n#### Introduction\n- We can `also use multiword property names, but then they must be quoted`\n- `Square brackets` also provide a way to obtain the property name as the result of any expression – as opposed to a literal string – like from a variable as follows:\n```javascript\nlet key = \"likes birds\";\n\n// same as user[\"likes birds\"] = true;\nuser[key] = true;\n```\nHere, the variable `key` may be calculated at run-time or depend on the user input. And then we use it to access the property. That gives us a great deal of flexibility.\n\nFor instance:\n\n```javascript\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\nlet key = prompt(\"What do you want to know about the user?\", \"name\");\n\n// access by variable\nalert( user[key] ); // John (if enter \"name\")\n```\n\nThe dot notation cannot be used in a similar way:\n```javascript\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\nlet key = \"name\";\nalert( user.key ) // undefined\n```\n#### Computed Properties\nWe can use square brackets in an object literal, when creating an object. That’s called _computed properties_.\n\nFor instance:\n```javascript\nlet fruit = prompt(\"Which fruit to buy?\", \"apple\");\n\nlet bag = {\n  [fruit]: 5, // the name of the property is taken from the variable fruit\n};\n\nalert( bag.apple ); // 5 if fruit=\"apple\"\n```\nWe can use more complex expressions inside square brackets:\n\n```javascript\nlet fruit = 'apple';\nlet bag = {\n  [fruit + 'Computers']: 5 // bag.appleComputers = 5\n};\n```\n\nSquare brackets are much more powerful than dot notation. They allow any property names and variables. But they are also more cumbersome to write.\n\nSo most of the time, when property names are known and simple, the dot is used. And if we need something more complex, then we switch to square brackets.\n\n#### BEWARE:\n- Beware of using `square brackets `to access properties whose names are given by external input. This may make your code susceptible to [object injection attacks](https://github.com/nodesecurity/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md)**\n\n\n### [Object.keys, values, entries](https://javascript.info/keys-values-entries#object-keys-values-entries)\n\nFor plain objects, the following methods are available:\n\n-   [Object.keys(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) – returns an array of keys.\n-   [Object.values(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values) – returns an array of values.\n-   [Object.entries(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries) – returns an array of `[key, value]` pairs.\n\nPlease note the distinctions (compared to map for example):\n\nMap\n\nObject\n\nCall syntax\n\n`map.keys()`\n\n`Object.keys(obj)`, but not `obj.keys()`\n\nReturns\n\niterable\n\n“real” Array\n\nThe first difference is that we have to call `Object.keys(obj)`, and not `obj.keys()`.\n\nWhy so? The main reason is flexibility. Remember, objects are a base of all complex structures in JavaScript. So we may have an object of our own like `data` that implements its own `data.values()` method. And we still can call `Object.values(data)` on it.\n\nThe second difference is that `Object.*` methods return “real” array objects, not just an iterable. That’s mainly for historical reasons.\n\nFor instance:\n\n```javascript\nlet user = {\n  name: \"John\",\n  age: 30\n};\n```\n\n-   `Object.keys(user) = [\"name\", \"age\"]`\n-   `Object.values(user) = [\"John\", 30]`\n-   `Object.entries(user) = [ [\"name\",\"John\"], [\"age\",30] ]`\n\nHere’s an example of using `Object.values` to loop over property values:\n\n[](https://javascript.info/keys-values-entries# \"run\")\n\n[](https://javascript.info/keys-values-entries# \"open in sandbox\")\n\n```javascript\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\n// loop over values\nfor (let value of Object.values(user)) {\n  alert(value); // John, then 30\n}\n```\n\nObject.keys/values/entries ignore symbolic properties\n\nJust like a `for..in` loop, these methods ignore properties that use `Symbol(...)` as keys.\n\nUsually that’s convenient. But if we want symbolic keys too, then there’s a separate method [Object.getOwnPropertySymbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols) that returns an array of only symbolic keys. Also, there exist a method [Reflect.ownKeys(obj)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys) that returns _all_ keys.\n### Transforming objects\n\nObjects lack many methods that exist for arrays, e.g. `map`, `filter` and others.\n\nIf we’d like to apply them, then we can use `Object.entries` followed by `Object.fromEntries`:\n\n1.  Use `Object.entries(obj)` to get an array of key/value pairs from `obj`.\n2.  Use array methods on that array, e.g. `map`, to transform these key/value pairs.\n3.  Use `Object.fromEntries(array)` on the resulting array to turn it back into an object.\n\nFor example, we have an object with prices, and would like to double them:\n\n```javascript\nlet prices = {\n  banana: 1,\n  orange: 2,\n  meat: 4,\n};\n\nlet doublePrices = Object.fromEntries(\n  // convert prices to array, map each key/value pair into another pair\n  // and then fromEntries gives back the object\n  Object.entries(prices).map(entry =\u003e [entry[0], entry[1] * 2])\n);\n\nalert(doublePrices.meat); // 8\n```\n\nIt may look difficult at first sight, but becomes easy to understand after you use it once or twice. We can make powerful chains of transforms this way.\n\n### [Property flags and descriptors](https://javascript.info/property-descriptors)\n### [Property getters and setters](https://javascript.info/property-accessors)\n## [Destructuring assignment](https://javascript.info/destructuring-assignment)\n## this\n### Context in function\n- For a typical function, the value of `this` is the object that the function is accessed on. In other words, if the function call is in the form `obj.f()`, then `this` refers to `obj`. For example:\n```javascript\nfunction getThis() {\n  return this;\n}\n\nconst obj1 = { name: \"obj1\" };\nconst obj2 = { name: \"obj2\" };\n\nobj1.getThis = getThis;\nobj2.getThis = getThis;\n\nconsole.log(obj1.getThis()); // { name: 'obj1', getThis: [Function: getThis] }\nconsole.log(obj2.getThis()); // { name: 'obj2', getThis: [Function: getThis] }\n\n```\n- If the value that the method is accessed on is a primitive, `this` will be a primitive value as well — but only if the function is in strict mode.\n-   If a function is called with `this` set to `undefined` or `null`, `this` gets substituted with [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) without `strict` mode and throws error with `strict`.\n-   If the function is called with `this` set to a primitive value, `this` gets substituted with the primitive value's wrapper object.\n### Context in callbacks\n- Callbacks are _typically_ called with a `this` value of `undefined` (calling it directly without attaching it to any object), which means if the function is non–strict, the value of `this` is the global object ([`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis)). This is the case for [iterative array methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods), the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor, [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout), etc.\n### Context in arrow functions\n- when evaluating an arrow function's body, the language does not create a new `this` binding.\n- In global code, `this` is always `globalThis` regardless of strictness, because of the [global context](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context) binding\n```javascript\nconst globalObject = this;\nconst foo = () =\u003e this;\nconsole.log(foo() === globalObject); // true\n\n```\n### Context in constructors\n- When a function is used as a constructor (with the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) keyword), its `this` is bound to the new object being constructed, no matter which object the constructor function is accessed on. The value of `this` becomes the value of the `new` expression unless the constructor returns another non–primitive value.\n```javascript\nfunction C() {\n  this.a = 37;\n}\n\nlet o = new C();\nconsole.log(o.a); // 37\n\nfunction C2() {\n  this.a = 37;\n  return { a: 38 };\n}\n\no = new C2();\nconsole.log(o.a); // 38\n```\n### Context in Class\n- *Instance context* - constructors, methods, instance field initializers; the `this` value is the object that the method was accessed on. If the method is not transferred to another object, `this` is generally an instance of the class.\n- *static context* - static methods, field initializers, static initialization blocks; `this` is the value of the class\n- *derived class constructor* -  derived constructors have no initial `this` binding. Calling [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super)creates a `this` binding within the constructor and essentially has the effect of evaluating the following line of code, where `Base` is the base class\n### Context in global\n- At the top level of a script, `this` refers to [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) whether in strict mode or not. This is generally the same as the global object — for example, if the source is put inside an HTML [`\u003cscript\u003e`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) element and executed as a script, `this === window`.\n## Arrays (See [[Data Types in JS#^bec712]])\n- Objects with `0 indexed keys` and are not associative.\n- [Array indices](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array_indices) are, in fact, properties with string keys that contain integers.\n- Only be accessed using `bracket notation.`\n- `Length` can be `increased or decreased`, `empty` spaces return `undefined.`\n- Has a bunch of inbuilt copying, modifying and iterative methods, refer [[Syntax-JS#^e7a286]]\n```javascript\nconst arrayLike = {\n  0: \"a\",\n  1: \"b\",\n  length: 2,\n};\n```\n- Above is the generic array like object\n\n## Functions\nA function declaration looks like this:\n\n```javascript\nfunction name(parameters, delimited, by, comma) {\n  /* code */\n}\n```\n-   `Values `passed to a function `as parameters are copied to its local variables.`\n-   A `function may access outer variables`. But it works only from inside out. The c`ode outside of the function doesn’t see its local variables.`\n-   A function can return a value. If it doesn’t, then its result is `undefined`.\n**NOTE: To make the code clean and easy to understand, it’s recommended to use mainly local variables and parameters in the function, not outer variables.**\n\n- Functions are values. They can be `assigned, copied or declared in any place of the code.`\n-  ` If `the function is `declared as a separate statement `in the main code flow, that’s called a `“Function Declaration”.`\n-   `If` the function is `created as a part of an expression`, it’s called a `“Function Expression”.`[[#^2ebdf6]]\n-   `Function Declarations are processed before the code block is executed. They are visible everywhere in the block.`\n-  ` Function Expressions are created when the execution flow reaches them.`\n\n## Functional Expressions\n\n^2ebdf6\n\n- a `map` function that should receive a function as first argument and an array as second argument:\n```javascript\nfunction map(f, a) {\n  const result = new Array(a.length);\n  for (let i = 0; i \u003c a.length; i++) {\n    result[i] = f(a[i]);\n  }\n  return result;\n}\n\nconst f = function (x) {\n  return x * x * x;\n}\n\nconst numbers = [0, 1, 2, 5, 10];\nconst cube = map(f, numbers);\nconsole.log(cube);\n```\n- Function Hoisting - The below code works, only works with function _declarations_\n```javascript\nconsole.log(square(5)); // 25\n\nfunction square(n) {\n  return n * n;\n}\n```\n\n## Callback Functions\nRefer [[Asynchronous JS#^f152c1]]\n\n## Arrow Functions\n- Its a type of functional experssion\n- It’s called “arrow functions”, because it looks like this:\n\n```javascript\nlet func = (arg1, arg2, ..., argN) =\u003e expression;\n```\n- It’s in the very spirit of JavaScript to `create a function and pass it somewhere.` And in such functions `we usually don’t want to leave the current context`. That’s where arrow functions come in handy.\n-  [Arrow functions have no “this”](https://javascript.info/arrow-functions#arrow-functions-have-no-this) If `this` is accessed, it is taken from the outside.\n```js\nlet group = { \n\ttitle: \"Our Group\", \n\tstudents: [\"John\", \"Pete\", \"Alice\"], \n\tshowList() { \n\t\tthis.students.forEach( \n\t\t\tstudent =\u003e alert(this.title + ': ' + student) \n\t\t); \n\t} \n}; \ngroup.showList();\n```\n- Arrow functions can’t run with `new`(whic means it can be used as a constructor)\n- #### `Arrow functions VS bind\n\t- There’s a subtle difference between an arrow function `=\u003e` and a regular function called with `.bind(this)`:\n\t\t-   `.bind(this)` creates a “bound version” of the function.\n\t\t-   The arrow `=\u003e` doesn’t create any binding. The function simply doesn’t have `this`. The lookup of `this` is made exactly the same way as a regular variable search: in the outer lexical environment.\n- [Arrows have no “arguments”](https://javascript.info/arrow-functions#arrows-have-no-arguments)\n```js\nfunction defer(f, ms) { \n\treturn function() { \n\t\tsetTimeout(() =\u003e f.apply(this, arguments), ms); \n\t}; \n} \nfunction sayHi(who) { \n\talert('Hello, ' + who); \n} \nlet sayHiDeferred = defer(sayHi, 2000); \nsayHiDeferred(\"John\"); // Hello, John after 2 seconds\n\n//Without arrow function\nfunction defer(f, ms) { \n\treturn function(...args) { \n\t\tlet ctx = this; \n\t\tsetTimeout(function() { \n\t\t\treturn f.apply(ctx, args); \n\t\t}, ms); \n\t}; \n}\n```\n\n## Function Prototype Methods\n\n### Function.prototype.apply(thisArg, arr)\n- The **`apply()`** method calls the specified function with a given `this` value, and `arguments` provided as an array (or an [array-like object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects)).\n- Uses\n-  [Using apply() to append an array to another](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#using_apply_to_append_an_array_to_another)\n\n```js\nconst array = [\"a\", \"b\"];\nconst elements = [0, 1, 2];\narray.push.apply(array, elements);\nconsole.info(array); // [\"a\", \"b\", 0, 1, 2]\n\n// Same effect as spread arg\nconst array = [\"a\", \"b\"];\nconst elements = [0, 1, 2];\narray.push(...elements);\nconsole.info(array); // [\"a\", \"b\", 0, 1, 2]\n```\n- [Using apply() and built-in functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#using_apply_and_built-in_functions)\n```js\n// min/max number in an array\nconst numbers = [5, 6, 2, 3, 7];\n\n// using Math.min/Math.max apply\nlet max = Math.max.apply(null, numbers);\n// This about equal to Math.max(numbers[0], …)\n// or Math.max(5, 6, …)\n\nlet min = Math.min.apply(null, numbers);\n```\n\n### Function.prototype.bind(thisArg, optional...)\n- The **`bind()`** method creates a new function that, when called, has its `this` keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.\n- \n## [Function object, NFE](https://javascript.info/function-object)\n\n## Closures\n- A closure is an expression (most commonly, a function) that can have free variables together with an environment that binds those variables (that \"closes\" the expression).\n- Inner can access outer, but not vice versa\n```javascript\nfunction addSquares(a, b) {\n  function square(x) {\n    return x * x;\n  }\n  return square(a) + square(b);\n}\nconst a = addSquares(2, 3); // returns 13\nconst b = addSquares(3, 4); // returns 25\nconst c = addSquares(4, 5); // returns 41\n\nfunction outside(x) {\n  function inside(y) {\n    return x + y;\n  }\n  return inside;\n}\nconst fnInside = outside(3); // Think of it like: give me a function that adds 3 to whatever you give it\nconst result = fnInside(5); // returns 8\nconst result1 = outside(3)(5); // returns 8\n```\n- in Essence `addSquares, outside` are function factories. All const variables form closures. They share the same function body definition, but store different `lexical environments`.\n- Name Conflicts - When two arguments or variables in the scopes of a closure have the same name, there is a _name conflict_. More nested scopes take precedence. So, `the innermost scope takes the highest precedence, while the outermost scope takes the lowest`. This is the scope chain.\n- If an enclosed function defines a variable with the same name as a variable in the outer scope, then there is no way to refer to the variable in the outer scope again. (The inner scope variable \"overrides\" the outer one, until the program exits the inner scope.\n```javascript\nfunction outside() {\n  const x = 5;\n  function inside(x) {\n    return x * 2;\n  }\n  return inside;\n}\n\noutside()(10); // returns 20 instead of 10\n```\n- An object containing methods for manipulating the inner variables of the outer function can be returned.\n```javascript\nconst createPet = function (name) {\n  let sex;\n\n  const pet = {\n    // setName(newName) is equivalent to setName: function (newName)\n    // in this context\n    setName(newName) {\n      name = newName;\n    },\n\n    getName() {\n      return name;\n    },\n\n    getSex() {\n      return sex;\n    },\n\n    setSex(newSex) {\n      if (typeof newSex === 'string' \u0026\u0026\n        (newSex.toLowerCase() === 'male' || newSex.toLowerCase() === 'female')) {\n        sex = newSex;\n      }\n    }\n  };\n\n  return pet;\n}\n\nconst pet = createPet('Vivie');\npet.getName();                  // Vivie\n\npet.setName('Oliver');\npet.setSex('male');\npet.getSex();                   // male\npet.getName();                  // Oliver\n```\n- you can use a `closure` anywhere that you might normally use an object with only a single method. Refer MDN Closure example\n## Emulating private methods with Closures\n```js\nconst counter = (function () {\n  let privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n\n  return {\n    increment() {\n      changeBy(1);\n    },\n\n    decrement() {\n      changeBy(-1);\n    },\n\n    value() {\n      return privateCounter;\n    },\n  };\n})();\n\nconsole.log(counter.value()); // 0.\n\ncounter.increment();\ncounter.increment();\nconsole.log(counter.value()); // 2.\n\ncounter.decrement();\nconsole.log(counter.value()); // 1.\n\n```\n- In the above example, there is a single lexical environment that is shared by the three functions: `counter.increment`, `counter.decrement`, and `counter.value`.\n- The shared lexical environment is created in the body of an anonymous function, _which is executed as soon as it has been defined_ (also known as an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)). The lexical environment contains two private items: a variable called `privateCounter`, and a function called `changeBy`. You can't access either of these private members from outside the anonymous function. Instead, you can access them using the three public functions that are returned from the anonymous wrapper.\n- Change the above, to normal function variable and make lexical environments according to one's usecases\n## Creating closures in a loop\n```js\nfunction showHelp(help) {\n  document.getElementById('help').textContent = help;\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: 'email', help: 'Your email address' },\n    { id: 'name', help: 'Your full name' },\n    { id: 'age', help: 'Your age (you must be over 16)' },\n  ];\n\n  for (var i = 0; i \u003c helpText.length; i++) {\n    // Culprit is the use of `var` on this line\n    var item = helpText[i];\n    document.getElementById(item.id).onfocus = function () {\n      showHelp(item.help);\n    };\n  }\n}\n\nsetupHelp();\n```\n- If you try this code out, you'll see that it doesn't work as expected. No matter what field you focus on, the message about your age will be displayed.\n\n- The reason for this is that the functions assigned to `onfocus` form closures; they consist of the function definition and the captured environment from the `setupHelp` function's scope. Three closures have been created by the loop, but each one shares the same single lexical environment, which has a variable with changing values (`item`). This is because the variable `item` is declared with `var` and thus has function scope due to hoisting. The value of `item.help` is determined when the `onfocus` callbacks are executed. Because the loop has already run its course by that time, the `item`variable object (shared by all three closures) has been left pointing to the last entry in the `helpText`list.\n- 1ST SOLUTION (SEPERATE FUNTIONS)\n```js\nfunction showHelp(help) {\n  document.getElementById('help').textContent = help;\n}\n\nfunction makeHelpCallback(help) {\n  return function () {\n    showHelp(help);\n  };\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: 'email', help: 'Your email address' },\n    { id: 'name', help: 'Your full name' },\n    { id: 'age', help: 'Your age (you must be over 16)' },\n  ];\n\n  for (var i = 0; i \u003c helpText.length; i++) {\n    var item = helpText[i];\n    document.getElementById(item.id).onfocus = makeHelpCallback(item.help);\n  }\n}\n\nsetupHelp();\n```\n- 2ND SOLUTION (ANONYMOUS CLOSURES)\n```js\nfunction showHelp(help) {\n  document.getElementById('help').textContent = help;\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: 'email', help: 'Your email address' },\n    { id: 'name', help: 'Your full name' },\n    { id: 'age', help: 'Your age (you must be over 16)' },\n  ];\n\n  for (var i = 0; i \u003c helpText.length; i++) {\n    (function () {\n      var item = helpText[i];\n      document.getElementById(item.id).onfocus = function () {\n        showHelp(item.help);\n      };\n    })(); // Immediate event listener attachment with the current value of item (preserved until iteration).\n  }\n}\n\nsetupHelp();\n\n```\n- 3RD SOLUTION (USE CONST \u0026 LET)\n```js\nfunction showHelp(help) {\n  document.getElementById('help').textContent = help;\n}\n\nfunction setupHelp() {\n  const helpText = [\n    { id: 'email', help: 'Your email address' },\n    { id: 'name', help: 'Your full name' },\n    { id: 'age', help: 'Your age (you must be over 16)' },\n  ];\n\n  for (let i = 0; i \u003c helpText.length; i++) {\n    const item = helpText[i];\n    document.getElementById(item.id).onfocus = () =\u003e {\n      showHelp(item.help);\n    };\n  }\n}\n\nsetupHelp();\n```\n## Using *arguments* object\n- The arguments of a function are maintained in an array-like object.\n- `arguments[i]`\n- The total number of arguments is indicated by `arguments.length`.\n```javascript\nfunction myConcat(separator) {\n  let result = ''; // initialize list\n  // iterate through arguments\n  for (let i = 1; i \u003c arguments.length; i++) {\n    result += arguments[i] + separator;\n  }\n  return result;\n}\n\n// returns \"red, orange, blue, \"\nmyConcat(', ', 'red', 'orange', 'blue');\n\n// returns \"elephant; giraffe; lion; cheetah; \"\nmyConcat('; ', 'elephant', 'giraffe', 'lion', 'cheetah');\n\n// returns \"sage. basil. oregano. pepper. parsley. \"\nmyConcat('. ', 'sage', 'basil', 'oregano', 'pepper', 'parsley');\n\n```\n## Function Parameters\n- Default parameter =  `undefined` unless defined and set as `function(a, b=1)`\n- Rest parameter = `function(a, ...b)`\n\n## IIFE\n- Use cases:\n\t- Avoid polluting the global namespace\n\t```js\n\t(() =\u003e {\n\t  // some initiation code\n\t  let firstVariable;\n\t  let secondVariable;\n\t})();\n\n\t// firstVariable and secondVariable will be discarded after the function is executed.\n\n\t```\n\t- Execute an async function\n\t```js\n\tconst getFileStream = async (url) =\u003e {\n\t  // implementation\n\t};\n\n\t(async () =\u003e {\n\t\t  const stream = await getFileStream(\"https://domain.name/path/file.ext\");\n\t  for await (const chunk of stream) {\n\t    console.log({ chunk });\n\t  }\n\t})();\n\t```\n\t- THe module pattern\n\t```js\n\tconst makeWithdraw = (balance) =\u003e\n  ((copyBalance) =\u003e {\n    let balance = copyBalance; // This variable is private\n    const doBadThings = () =\u003e {\n      console.log(\"I will do bad things with your money\");\n    };\n    doBadThings();\n    return {\n      withdraw(amount) {\n        if (balance \u003e= amount) {\n          balance -= amount;\n          return balance;\n        }\n        return \"Insufficient money\";\n      },\n    };\n  })(balance);\n\nconst firstAccount = makeWithdraw(100); // \"I will do bad things with your money\"\nconsole.log(firstAccount.balance); // undefined\nconsole.log(firstAccount.withdraw(20)); // 80\nconsole.log(firstAccount.withdraw(30)); // 50\nconsole.log(firstAccount.doBadThings); // undefined; this method is private\nconst secondAccount = makeWithdraw(20); // \"I will do bad things with your money\"\nconsole.log(secondAccount.withdraw(30)); // \"Insufficient money\"\nconsole.log(secondAccount.withdraw(20)); // 0\n\t```\n## Template literals \n- backtick could hold expressions using `${}` \n\n## `strict` mode\nTo fully enable all features of modern JavaScript, we should start scripts with `\"use strict\"`.\n\n```javascript\n'use strict';\n\n...\n```\n- Ensure that “use strict” is at the top\n- There’s no way to cancel `use strict`\nModern JavaScript supports “classes” and “modules” – advanced language structures (we’ll surely get to them), that enable `use strict` automatically. So we don’t need to add the `\"use strict\"` directive, if we use them.\n\n**So, for now `\"use strict\";` is a welcome guest at the top of your scripts. Later, when your code is all in classes and modules, you may omit it.**\n\n## Asynchronous Javascript\n### Web Workers\n- Javascript has introduced a new concept to prevent the limitation we are facing, that is, `Web Workers. `Web Workers (threads in js) are mainly used `to perform CPU-intensiveJavascript tasks`. They `can perform long-running tasks without affecting or blocking the main execution thread.`\n\nUsing a Constructor, we can create a worker object, which will run a js file. This js file includes code to run the worker thread; these workers run in some other global context that is different from the current window.\\\n\nHowever, Node.js built-in asynchronous I/O operations are more efficient than Workers can be. Web workers are not of much help with I/O-intensive work.\n\nSee [[Asynchronous JS]]\nfor events, promise, setTimeout\n\n## Personal Notes\n\n-   Block has global scope\n-   Labeled loops like java\n-   Return condition must be in the same line\n-   Functions are first class objects\n-   Closures are functions inside function which can run even if outer\n    function run is over\n-   Objects can contain functions.\n-   Functions attached to an object can access object variables using\n    **[this]{.underline}** keyword\n-   Functions can also be attached to objects afterwards and access\n    object properties using **[this]{.underline}** keyword\n-   **[Call]{.underline}** and **[apply]{.underline}** keywords can also\n    be used to execute a function attaching an object temporarily\n-   Use **[bind]{.underline}** partially or fully bind functions to an\n    object\n-   **[new]{.underline}** keyword with function call can be used for\n    creating constructors which creates new objects and made available\n    using **[this]{.underline}** keyword\n-   Javascript instance + inheritence = prototype\n-   **[\\_\\_proto\\_\\_]{.underline}** keyword is used to attach prototypes\n    with objects. Changes to prototypes are visible to everyone. The\n    ***[for/in]{.underline}*** **** statement allows iterations over\n    properties of an object. hasOwnProperty function can be used to\n    exclude prototype properties from objects.\n-   The first is Object.create, which is a recent addition to Js and not\n    available in all implementations yet. ***var my0bj = Object.create\n    (myPrototype);***\\\n-   The second way, which works anywhere, has to do with constructors.\n    Constructors have a property called prototype. This is \\*not\\* the\n    prototype of the constructor function itself; instead, it\\'s the\n    prototype that new objects are given when they\\'re created with that\n    constructor and the new keyword. ***MyConstructor.prototype = {\n    myNumber: 5, getMyNumber: function(){ return this.myNumber; } }; var\n    myNewObj2 = new MyConstructor(); myNewObj2.getMyNumber(); //=5\n    myNewObj2.myNumber = 6; myNewobj2.getMyNumber(); //=6***\n\n## Transpilers and polyfills\n### Transpilers\n- A [transpiler](https://en.wikipedia.org/wiki/Source-to-source_compiler) is a special piece of software that translates source code to another source code. It can parse (“read and understand”) modern code and rewrite it using older syntax constructs, so that it’ll also work in outdated engines.\nE.g. JavaScript before year 2020 didn’t have the “nullish coalescing operator” `??`. So, if a visitor uses an outdated browser, it may fail to understand the code like `height = height ?? 100`.\n\nA transpiler would analyze our code and rewrite `height ?? 100` into `(height !== undefined \u0026\u0026 height !== null) ? height : 100`.\nSpeaking of names, [Babel](https://babeljs.io/) is one of the most prominent transpilers out there.\n\nModern project build systems, such as [webpack](https://webpack.js.org/), provide a means to run a transpiler automatically on every code change, so it’s very easy to integrate into the development process.\n\n### Polyfills\nNew language features may include not only syntax constructs and operators, but also built-in functions.\n\nFor example, `Math.trunc(n)` is a function that “cuts off” the decimal part of a number, e.g `Math.trunc(1.23)` returns `1`.\n\nIn some (very outdated) JavaScript engines, there’s no `Math.trunc`, so such code will fail.\n\nAs we’re talking about new functions, not syntax changes, there’s no need to transpile anything here. We just need to declare the missing function.\n\nA script that updates/adds new functions is called “polyfill”. It “fills in” the gap and adds missing implementations.\n\nTwo interesting polyfill libraries are:\n\n-   [core js](https://github.com/zloirock/core-js) that supports a lot, allows to include only needed features.\n-   [polyfill.io](https://polyfill.io/) service that provides a script with polyfills, depending on the features and user’s browser.\n\n---\nReferences:\n- \n","lastmodified":"2023-07-13T10:11:59.125362952Z","tags":["languages","javascript"]},"/Javascript-Arrays":{"title":"Javascript Arrays","content":"-----------------\nDate Created : `25-01-2023`\n\nTags: #javascript, #publish \n\n\n----------------------------\n# `Javascript Arrays`.\n\nNOTE: Summarize [Arrays](https://javascript.info/array)\n\nIn JavaScript, arrays aren't [primitives](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) but are instead `Array` objects with the following core characteristics:\n\n-   **JavaScript arrays are resizable** and **can contain a mix of different [data types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures)**. (When those characteristics are undesirable, use [typed arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n-   **JavaScript arrays are not associative arrays** and so, array elements cannot be accessed using arbitrary strings as indexes, but must be accessed using nonnegative integers (or their respective string form) as indexes.\n-   **JavaScript arrays are [zero-indexed](https://en.wikipedia.org/wiki/Zero-based_numbering)**: the first element of an array is at index `0`, the second is at index `1`, and so on — and the last element is at the value of the array's [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property minus `1`.\n-   **JavaScript [array-copy operations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copy_an_array) create [shallow copies](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy)**. (All standard built-in copy operations with _any_ JavaScript objects create shallow copies, rather than [deep copies](https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy)).\n\n- A JavaScript array's [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property and numerical properties are connected.\n\n## Copying Methods and mutuaing methods\nThe following methods create new arrays with `@@species`:\n\n-   [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)\n-   [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n-   [`flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)\n-   [`flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)\n-   [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n-   [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\n-   [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) (to construct the array of removed elements that's returned)\n\n\nThe following methods mutate the original array:\n\n-   [`copyWithin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin)\n-   [`fill()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\n-   [`pop()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop)\n-   [`push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push)\n-   [`reverse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n-   [`shift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift)\n-   [`sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n-   [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\n-   [`unshift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift)\n\n\n## Iterative Methods\n- Many array methods take a callback function as an argument.\n- They all share the same signature:\n\n```javascript\nmethod(callbackFn, thisArg)\n```\nWhere `callbackFn` takes three arguments:\n\n`element`\n\nThe current element being processed in the array.\n\n`index`\n\nThe index of the current element being processed in the array.\n\n`array`\n\nThe array that the method was called upon.\n\nThe `thisArg` argument (defaults to `undefined`) will be used as the `this` value when calling `callbackFn`. The `this` value ultimately observable by `callbackFn` is determined according to [the usual rules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this): if `callbackFn` is [non-strict](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#no_this_substitution), primitive `this` values are wrapped into objects, and `undefined`/`null` is substituted with [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis). The `thisArg` argument is irrelevant for any `callbackFn` defined with an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), as arrow functions don't have their own `this` binding.\n\nThe following methods are iterative:\n\n-   [`every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every)\n-   [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n-   [`find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n-   [`findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)\n-   [`findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast)\n-   [`findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex)\n-   [`flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)\n-   [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n-   [`group()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/group)\n-   [`groupToMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/groupToMap)\n-   [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n-   [`some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n\n## Generic Array Methods\n- Always generic\n- They only access the array elements through the `length` property and the indexed elements.\n```javascript\nconst arrayLike = {\n  0: \"a\",\n  1: \"b\",\n  length: 2,\n};\nconsole.log(Array.prototype.join.call(arrayLike, \"+\")); // 'a+b'\n```\n\n## Constructor\n- `Array()`\n## Static Methods\n- `Array.from()` - Creates new array from array-like objects and iterable object\n- `Array.isArray()` - check if array\n- `Array.of()` - Creates a new `Array` instance with a variable number of arguments, regardless of number or type of the arguments.\n- \n## Instance Properties\n- `Array.prototype.length` \n- [`Array.prototype[@@unscopables]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables)\n\nContains property names that were not included in the ECMAScript standard prior to the ES2015 version and that are ignored for [`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) statement-binding purposes.\n\n## Instance Methods\n[`Array.prototype.at()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at)\n\nReturns the array item at the given index. Accepts negative integers, which count back from the last item.\n\n[`Array.prototype.concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)\n\nReturns a new array that is the calling array joined with other array(s) and/or value(s).\n\n[`Array.prototype.copyWithin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin)\n\nCopies a sequence of array elements within an array.\n\n[`Array.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries)\n\nReturns a new [_array iterator_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators) object that contains the key/value pairs for each index in an array.\n\n[`Array.prototype.every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every)\n\nReturns `true` if every element in the calling array satisfies the testing function.\n\n[`Array.prototype.fill()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\n\nFills all the elements of an array from a start index to an end index with a static value.\n\n[`Array.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n\nReturns a new array containing all elements of the calling array for which the provided filtering function returns `true`.\n\n[`Array.prototype.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n\nReturns the value of the first element in the array that satisfies the provided testing function, or `undefined` if no appropriate element is found.\n\n```js\nconst found = array1.find(element =\u003e element \u003e 10);\n```\n\n[`Array.prototype.findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)\n\nReturns the index of the first element in the array that satisfies the provided testing function, or `-1` if no appropriate element was found.\n\n[`Array.prototype.findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast)\n\nReturns the value of the last element in the array that satisfies the provided testing function, or `undefined` if no appropriate element is found.\n\n[`Array.prototype.findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex)\n\nReturns the index of the last element in the array that satisfies the provided testing function, or `-1`if no appropriate element was found.\n\n[`Array.prototype.flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)\n\nReturns a new array with all sub-array elements concatenated into it recursively up to the specified depth.\n\n[`Array.prototype.flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)\n\nReturns a new array formed by applying a given callback function to each element of the calling array, and then flattening the result by one level.\n\n[`Array.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n\nCalls a function for each element in the calling array.\n\n[`Array.prototype.includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)\n\nDetermines whether the calling array contains a value, returning `true` or `false` as appropriate.\n\n[`Array.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)\n\nReturns the first (least) index at which a given element can be found in the calling array.\n\n[`Array.prototype.join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join)\n\nJoins all elements of an array into a string.\n\n[`Array.prototype.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys)\n\nReturns a new [_array iterator_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators) that contains the keys for each index in the calling array.\n\n[`Array.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf)\n\nReturns the last (greatest) index at which a given element can be found in the calling array, or `-1`if none is found.\n\n[`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\nReturns a new array containing the results of invoking a function on every element in the calling array.\n\n[`Array.prototype.pop()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop)\n\nRemoves the last element from an array and returns that element.\n\n[`Array.prototype.push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push)\n\nAdds one or more elements to the end of an array, and returns the new `length` of the array.\n\n[`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n\nExecutes a user-supplied \"reducer\" callback function on each element of the array (from left to right), to reduce it to a single value.\n\n[`Array.prototype.reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight)\n\nExecutes a user-supplied \"reducer\" callback function on each element of the array (from right to left), to reduce it to a single value.\n\n[`Array.prototype.reverse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n\nReverses the order of the elements of an array _in place_. (First becomes the last, last becomes first.)\n\n[`Array.prototype.shift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift)\n\nRemoves the first element from an array and returns that element.\n\n[`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\n\nExtracts a section of the calling array and returns a new array.\n\n[`Array.prototype.some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n\nReturns `true` if at least one element in the calling array satisfies the provided testing function.\n\n[`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n\nSorts the elements of an array in place and returns the array.\n\n[`Array.prototype.splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\n\nAdds and/or removes elements from an array.\n\n[`Array.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString)\n\nReturns a localized string representing the calling array and its elements. Overrides the [`Object.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString) method.\n\n[`Array.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString)\n\nReturns a string representing the calling array and its elements. Overrides the [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method.\n\n[`Array.prototype.unshift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift)\n\nAdds one or more elements to the front of an array, and returns the new `length` of the array.\n\n[`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values)\n\nReturns a new [_array iterator_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators) object that contains the values for each index in the array.\n\n[`Array.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator)\n\nAn alias for the [`values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) method by default.\n\n## Examples\n```javascript\n//Creation\nconst fruits = [\"Apple\", \"Banana\"];\nconst fruits2 = new Array(\"Apple\", \"Banana\");\nconst fruits3 = \"Apple, Banana\".split(\", \");\n\n// String creation\nconst fruitsString = fruits.join(\", \");\n\n//Element access\nfruits[0]; // Apple\nfruits[1]; // Banana\nfruits[fruits.length - 1]; // Banana\nfruits[99]; // undefined\n\n//Find Index\nconsole.log(fruits.indexOf(\"Banana\"));// 1\n\n// Check if element exist\nfruits.includes(\"Banana\"); // true\nfruits.includes(\"Cherry\"); // false\n\n// If indexOf() doesn't return -1, the array contains the given item.\nfruits.indexOf(\"Banana\") !== -1; // true\nfruits.indexOf(\"Cherry\") !== -1; // false\n\n//Append at back\nconst newLength = fruits.push(\"Orange\");\n\n//Remove from back\nconst removedItem = fruits.pop();\n\n// Remove multiple items\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"];\nconst start = -3;\nconst removedItems = fruits.splice(start);\nconsole.log(fruits);// [\"Apple\", \"Banana\"]\nconsole.log(removedItems);// [\"Strawberry\", \"Mango\", \"Cherry\"]\n\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"];\nconst start = 2;\nconst removedItems = fruits.splice(start);\nconsole.log(fruits);// [\"Apple\", \"Banana\"]\nconsole.log(removedItems);// [\"Strawberry\", \"Mango\", \"Cherry\"]\n\nconst fruits = [\"Apple\", \"Strawberry\", \"Cherry\", \"Banana\", \"Mango\"];\nconst start = 0;\nconst deleteCount = 3;\nconst removedItems = fruits.splice(start, deleteCount);\nconsole.log(fruits);// [\"Banana\", \"Mango\"]\nconsole.log(removedItems);// [\"Apple\", \"Strawberry\", \"Cherry\"]\n//splice can also be used to replace elements\nconst removedItems = fruits.splice(start, deleteCount, \"Mango\", \"Cherry\");\n\n//Append at front\nconst newLength = fruits.unshift(\"Strawberry\");\n\n// Remove from front\nconst removedItem = fruits.shift();\n\n//iterate over\nconst fruits = [\"Apple\", \"Mango\", \"Cherry\"];\nfor (const fruit of fruits) {\n  console.log(fruit);\n}\n\nconst fruits = [\"Apple\", \"Mango\", \"Cherry\"];\nfruits.forEach((item, index, array) =\u003e {\n  console.log(item, index);\n});\n\n// Merging two arrays\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\"];\nconst moreFruits = [\"Mango\", \"Cherry\"];\nconst combinedFruits = fruits.concat(moreFruits);\n\n// Copy array\nconst fruits = [\"Strawberry\", \"Mango\"];\n\nconst fruitsCopy = [...fruits];// [\"Strawberry\", \"Mango\"]\n\nconst fruitsCopy2 = Array.from(fruits);// [\"Strawberry\", \"Mango\"]\n\nconst fruitsCopy3 = fruits.slice();// [\"Strawberry\", \"Mango\"]\n\n//\n\n\n```\n### Splice(The swiss army knife)\nThe [arr.splice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method is a swiss army knife for arrays. It can do everything: insert, remove and replace elements.\n\nThe syntax is:\n\n```javascript\narr.splice(start[, deleteCount, elem1, ..., elemN])\n```\n\nIt modifies `arr` starting from the index `start`: removes `deleteCount` elements and then inserts `elem1, ..., elemN` at their place. Returns the array of removed elements.\n\nThis method is easy to grasp by examples.\n\nLet’s start with the deletion:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [\"I\", \"study\", \"JavaScript\"];\n\narr.splice(1, 1); // from index 1 remove 1 element\n\nalert( arr ); // [\"I\", \"JavaScript\"]\n```\n\nEasy, right? Starting from the index `1` it removed `1` element.\n\nIn the next example we remove 3 elements and replace them with the other two:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [\"I\", \"study\", \"JavaScript\", \"right\", \"now\"];\n\n// remove 3 first elements and replace them with another\narr.splice(0, 3, \"Let's\", \"dance\");\n\nalert( arr ) // now [\"Let's\", \"dance\", \"right\", \"now\"]\n```\n\nHere we can see that `splice` returns the array of removed elements:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [\"I\", \"study\", \"JavaScript\", \"right\", \"now\"];\n\n// remove 2 first elements\nlet removed = arr.splice(0, 2);\n\nalert( removed ); // \"I\", \"study\" \u003c-- array of removed elements\n```\n\nThe `splice` method is also able to insert the elements without any removals. For that we need to set `deleteCount` to `0`:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [\"I\", \"study\", \"JavaScript\"];\n\n// from index 2\n// delete 0\n// then insert \"complex\" and \"language\"\narr.splice(2, 0, \"complex\", \"language\");\n\nalert( arr ); // \"I\", \"study\", \"complex\", \"language\", \"JavaScript\"\n```\n\n### [slice](https://javascript.info/array-methods#slice)\n\nThe method [arr.slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) is much simpler than similar-looking `arr.splice`.\n\nThe syntax is:\n\n```javascript\narr.slice([start], [end])\n```\n\nIt returns a new array copying to it all items from index `start` to `end` (not including `end`). Both `start`and `end` can be negative, in that case position from array end is assumed.\n\nIt’s similar to a string method `str.slice`, but instead of substrings it makes subarrays.\n\nFor instance:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [\"t\", \"e\", \"s\", \"t\"];\n\nalert( arr.slice(1, 3) ); // e,s (copy from 1 to 3)\n\nalert( arr.slice(-2) ); // s,t (copy from -2 till the end)\n```\n\nWe can also call it without arguments: `arr.slice()` creates a copy of `arr`. That’s often used to obtain a copy for further transformations that should not affect the original array.\n\n### [concat](https://javascript.info/array-methods#concat)\n\nThe method [arr.concat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) creates a new array that includes values from other arrays and additional items.\n\nThe syntax is:\n\n```javascript\narr.concat(arg1, arg2...)\n```\n\nIt accepts any number of arguments – either arrays or values.\n\nThe result is a new array containing items from `arr`, then `arg1`, `arg2` etc.\n\nIf an argument `argN` is an array, then all its elements are copied. Otherwise, the argument itself is copied.\n\nFor instance:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [1, 2];\n\n// create an array from: arr and [3,4]\nalert( arr.concat([3, 4]) ); // 1,2,3,4\n\n// create an array from: arr and [3,4] and [5,6]\nalert( arr.concat([3, 4], [5, 6]) ); // 1,2,3,4,5,6\n\n// create an array from: arr and [3,4], then add values 5 and 6\nalert( arr.concat([3, 4], 5, 6) ); // 1,2,3,4,5,6\n```\n\nNormally, it only copies elements from arrays. Other objects, even if they look like arrays, are added as a whole:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [1, 2];\n\nlet arrayLike = {\n  0: \"something\",\n  length: 1\n};\n\nalert( arr.concat(arrayLike) ); // 1,2,[object Object]\n```\n\n…But if an array-like object has a special `Symbol.isConcatSpreadable` property, then it’s treated as an array by `concat`: its elements are added instead:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [1, 2];\n\nlet arrayLike = {\n  0: \"something\",\n  1: \"else\",\n  [Symbol.isConcatSpreadable]: true,\n  length: 2\n};\n\nalert( arr.concat(arrayLike) ); // 1,2,something,else\n```\n\n## [Searching in array](https://javascript.info/array-methods#searching-in-array)\n\nNow let’s cover methods that search in an array.\n\n### [indexOf/lastIndexOf and includes](https://javascript.info/array-methods#indexof-lastindexof-and-includes)\n\nThe methods [arr.indexOf](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) and [arr.includes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) have the similar syntax and do essentially the same as their string counterparts, but operate on items instead of characters:\n\n-   `arr.indexOf(item, from)` – looks for `item` starting from index `from`, and returns the index where it was found, otherwise `-1`.\n-   `arr.includes(item, from)` – looks for `item` starting from index `from`, returns `true` if found.\n\nUsually these methods are used with only one argument: the `item` to search. By default, the search is from the beginning.\n\nFor instance:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [1, 0, false];\n\nalert( arr.indexOf(0) ); // 1\nalert( arr.indexOf(false) ); // 2\nalert( arr.indexOf(null) ); // -1\n\nalert( arr.includes(1) ); // true\n```\n\nPlease note that `indexOf` uses the strict equality `===` for comparison. So, if we look for `false`, it finds exactly `false` and not the zero.\n\nIf we want to check if `item` exists in the array, and don’t need the index, then `arr.includes` is preferred.\n\nThe method [arr.lastIndexOf](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf) is the same as `indexOf`, but looks for from right to left.\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet fruits = ['Apple', 'Orange', 'Apple']\n\nalert( fruits.indexOf('Apple') ); // 0 (first Apple)\nalert( fruits.lastIndexOf('Apple') ); // 2 (last Apple)\n```\n\nThe `includes` method handles `NaN` correctly\n\nA minor, but noteworthy feature of `includes` is that it correctly handles `NaN`, unlike `indexOf`:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nconst arr = [NaN];\nalert( arr.indexOf(NaN) ); // -1 (wrong, should be 0)\nalert( arr.includes(NaN) );// true (correct)\n```\n\nThat’s because `includes` was added to JavaScript much later and uses the more up to date comparison algorithm internally.\n\n### [find and findIndex/findLastIndex](https://javascript.info/array-methods#find-and-findindex-findlastindex)\n\nImagine we have an array of objects. How do we find an object with the specific condition?\n\nHere the [arr.find(fn)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) method comes in handy.\n\nThe syntax is:\n\n```javascript\nlet result = arr.find(function(item, index, array) {\n  // if true is returned, item is returned and iteration is stopped\n  // for falsy scenario returns undefined\n});\n```\n\nThe function is called for elements of the array, one after another:\n\n-   `item` is the element.\n-   `index` is its index.\n-   `array` is the array itself.\n\nIf it returns `true`, the search is stopped, the `item` is returned. If nothing found, `undefined` is returned.\n\nFor example, we have an array of users, each with the fields `id` and `name`. Let’s find the one with `id == 1`:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet users = [\n  {id: 1, name: \"John\"},\n  {id: 2, name: \"Pete\"},\n  {id: 3, name: \"Mary\"}\n];\n\nlet user = users.find(item =\u003e item.id == 1);\n\nalert(user.name); // John\n```\n\nIn real life arrays of objects is a common thing, so the `find` method is very useful.\n\nNote that in the example we provide to `find` the function `item =\u003e item.id == 1` with one argument. That’s typical, other arguments of this function are rarely used.\n\nThe [arr.findIndex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) method has the same syntax, but returns the index where the element was found instead of the element itself. The value of `-1` is returned if nothing is found.\n\nThe [arr.findLastIndex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex) method is like `findIndex`, but searches from right to left, similar to `lastIndexOf`.\n\nHere’s an example:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet users = [\n  {id: 1, name: \"John\"},\n  {id: 2, name: \"Pete\"},\n  {id: 3, name: \"Mary\"},\n  {id: 4, name: \"John\"}\n];\n\n// Find the index of the first John\nalert(users.findIndex(user =\u003e user.name == 'John')); // 0\n\n// Find the index of the last John\nalert(users.findLastIndex(user =\u003e user.name == 'John')); // 3\n```\n\n### [filter](https://javascript.info/array-methods#filter)\n\nThe `find` method looks for a single (first) element that makes the function return `true`.\n\nIf there may be many, we can use [arr.filter(fn)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\n\nThe syntax is similar to `find`, but `filter` returns an array of all matching elements:\n\n```javascript\nlet results = arr.filter(function(item, index, array) {\n  // if true item is pushed to results and the iteration continues\n  // returns empty array if nothing found\n});\n```\n\nFor instance:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet users = [\n  {id: 1, name: \"John\"},\n  {id: 2, name: \"Pete\"},\n  {id: 3, name: \"Mary\"}\n];\n\n// returns array of the first two users\nlet someUsers = users.filter(item =\u003e item.id \u003c 3);\n\nalert(someUsers.length); // 2\n```\n\n## [Transform an array](https://javascript.info/array-methods#transform-an-array)\n\nLet’s move on to methods that transform and reorder an array.\n\n### [map](https://javascript.info/array-methods#map)\n\nThe [arr.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) method is one of the most useful and often used.\n\nIt calls the function for each element of the array and returns the array of results.\n\nThe syntax is:\n\n```javascript\nlet result = arr.map(function(item, index, array) {\n  // returns the new value instead of item\n});\n```\n\nFor instance, here we transform each element into its length:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet lengths = [\"Bilbo\", \"Gandalf\", \"Nazgul\"].map(item =\u003e item.length);\nalert(lengths); // 5,7,6\n```\n\n### [sort(fn)](https://javascript.info/array-methods#sort-fn)\n\nThe call to [arr.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) sorts the array _in place_, changing its element order.\n\nIt also returns the sorted array, but the returned value is usually ignored, as `arr` itself is modified.\n\nFor instance:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [ 1, 2, 15 ];\n\n// the method reorders the content of arr\narr.sort();\n\nalert( arr );  // 1, 15, 2\n```\n\nDid you notice anything strange in the outcome?\n\nThe order became `1, 15, 2`. Incorrect. But why?\n\n**The items are sorted as strings by default.**\n\nLiterally, all elements are converted to strings for comparisons. For strings, lexicographic ordering is applied and indeed `\"2\" \u003e \"15\"`.\n\nTo use our own sorting order, we need to supply a function as the argument of `arr.sort()`.\n\nThe function should compare two arbitrary values and return:\n\n```javascript\nfunction compare(a, b) {\n  if (a \u003e b) return 1; // if the first value is greater than the second\n  if (a == b) return 0; // if values are equal\n  if (a \u003c b) return -1; // if the first value is less than the second\n}\n```\n\nFor instance, to sort as numbers:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nfunction compareNumeric(a, b) {\n  if (a \u003e b) return 1;\n  if (a == b) return 0;\n  if (a \u003c b) return -1;\n}\n\nlet arr = [ 1, 2, 15 ];\n\narr.sort(compareNumeric);\n\nalert(arr);  // 1, 2, 15\n```\n\nNow it works as intended.\n\nLet’s step aside and think what’s happening. The `arr` can be array of anything, right? It may contain numbers or strings or objects or whatever. We have a set of _some items_. To sort it, we need an _ordering function_ that knows how to compare its elements. The default is a string order.\n\nThe `arr.sort(fn)` method implements a generic sorting algorithm. We don’t need to care how it internally works (an optimized [quicksort](https://en.wikipedia.org/wiki/Quicksort) or [Timsort](https://en.wikipedia.org/wiki/Timsort) most of the time). It will walk the array, compare its elements using the provided function and reorder them, all we need is to provide the `fn` which does the comparison.\n\nBy the way, if we ever want to know which elements are compared – nothing prevents from alerting them:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\n[1, -2, 15, 2, 0, 8].sort(function(a, b) {\n  alert( a + \" \u003c\u003e \" + b );\n  return a - b;\n});\n```\n\nThe algorithm may compare an element with multiple others in the process, but it tries to make as few comparisons as possible.\n\nA comparison function may return any number\n\nActually, a comparison function is only required to return a positive number to say “greater” and a negative number to say “less”.\n\nThat allows to write shorter functions:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [ 1, 2, 15 ];\n\narr.sort(function(a, b) { return a - b; });\n\nalert(arr);  // 1, 2, 15\n```\n\nArrow functions for the best\n\nRemember [arrow functions](https://javascript.info/arrow-functions-basics)? We can use them here for neater sorting:\n\n```javascript\narr.sort( (a, b) =\u003e a - b );\n```\n\nThis works exactly the same as the longer version above\n\n### [reverse](https://javascript.info/array-methods#reverse)\n\nThe method [arr.reverse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse) reverses the order of elements in `arr`.\n\nFor instance:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [1, 2, 3, 4, 5];\narr.reverse();\n\nalert( arr ); // 5,4,3,2,1\n```\n\nIt also returns the array `arr` after the reversal.\n\n### [split and join](https://javascript.info/array-methods#split-and-join)\n\nHere’s the situation from real life. We are writing a messaging app, and the person enters the comma-delimited list of receivers: `John, Pete, Mary`. But for us an array of names would be much more comfortable than a single string. How to get it?\n\nThe [str.split(delim)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) method does exactly that. It splits the string into an array by the given delimiter `delim`.\n\nIn the example below, we split by a comma followed by space:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet names = 'Bilbo, Gandalf, Nazgul';\n\nlet arr = names.split(', ');\n\nfor (let name of arr) {\n  alert( `A message to ${name}.` ); // A message to Bilbo  (and other names)\n}\n```\n\nThe `split` method has an optional second numeric argument – a limit on the array length. If it is provided, then the extra elements are ignored. In practice it is rarely used though:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = 'Bilbo, Gandalf, Nazgul, Saruman'.split(', ', 2);\n\nalert(arr); // Bilbo, Gandalf\n```\n\nSplit into letters\n\nThe call to `split(s)` with an empty `s` would split the string into an array of letters:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet str = \"test\";\n\nalert( str.split('') ); // t,e,s,t\n```\n\nThe call [arr.join(glue)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join) does the reverse to `split`. It creates a string of `arr` items joined by `glue` between them.\n\nFor instance:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = ['Bilbo', 'Gandalf', 'Nazgul'];\n\nlet str = arr.join(';'); // glue the array into a string using ;\n\nalert( str ); // Bilbo;Gandalf;Nazgul\n```\n\n### [reduce/reduceRight](https://javascript.info/array-methods#reduce-reduceright)\n\nWhen we need to iterate over an array – we can use `forEach`, `for` or `for..of`.\n\nWhen we need to iterate and return the data for each element – we can use `map`.\n\nThe methods [arr.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) and [arr.reduceRight](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight) also belong to that breed, but are a little bit more intricate. They are used to calculate a single value based on the array.\n\nThe syntax is:\n\n```javascript\nlet value = arr.reduce(function(accumulator, item, index, array) {\n  // ...\n}, [initial]);\n```\n\nThe function is applied to all array elements one after another and “carries on” its result to the next call.\n\nArguments:\n\n-   `accumulator` – is the result of the previous function call, equals `initial` the first time (if `initial` is provided).\n-   `item` – is the current array item.\n-   `index` – is its position.\n-   `array` – is the array.\n\nAs function is applied, the result of the previous function call is passed to the next one as the first argument.\n\nSo, the first argument is essentially the accumulator that stores the combined result of all previous executions. And at the end it becomes the result of `reduce`.\n\nSounds complicated?\n\nThe easiest way to grasp that is by example.\n\nHere we get a sum of an array in one line:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [1, 2, 3, 4, 5];\n\nlet result = arr.reduce((sum, current) =\u003e sum + current, 0);\n\nalert(result); // 15\n```\n\nThe function passed to `reduce` uses only 2 arguments, that’s typically enough.\n\nLet’s see the details of what’s going on.\n\n1.  On the first run, `sum` is the `initial` value (the last argument of `reduce`), equals `0`, and `current` is the first array element, equals `1`. So the function result is `1`.\n2.  On the second run, `sum = 1`, we add the second array element (`2`) to it and return.\n3.  On the 3rd run, `sum = 3` and we add one more element to it, and so on…\n\nThe calculation flow:\n\nOr in the form of a table, where each row represents a function call on the next array element:\n\n`sum`\n\n`current`\n\nresult\n\nthe first call\n\n`0`\n\n`1`\n\n`1`\n\nthe second call\n\n`1`\n\n`2`\n\n`3`\n\nthe third call\n\n`3`\n\n`3`\n\n`6`\n\nthe fourth call\n\n`6`\n\n`4`\n\n`10`\n\nthe fifth call\n\n`10`\n\n`5`\n\n`15`\n\nHere we can clearly see how the result of the previous call becomes the first argument of the next one.\n\nWe also can omit the initial value:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [1, 2, 3, 4, 5];\n\n// removed initial value from reduce (no 0)\nlet result = arr.reduce((sum, current) =\u003e sum + current);\n\nalert( result ); // 15\n```\n\nThe result is the same. That’s because if there’s no initial, then `reduce` takes the first element of the array as the initial value and starts the iteration from the 2nd element.\n\nThe calculation table is the same as above, minus the first row.\n\nBut such use requires an extreme care. If the array is empty, then `reduce` call without initial value gives an error.\n\nHere’s an example:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet arr = [];\n\n// Error: Reduce of empty array with no initial value\n// if the initial value existed, reduce would return it for the empty arr.\narr.reduce((sum, current) =\u003e sum + current);\n```\n\nSo it’s advised to always specify the initial value.\n\nThe method [arr.reduceRight](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight) does the same, but goes from right to left.\n\n## [Array.isArray](https://javascript.info/array-methods#array-isarray)\n\nArrays do not form a separate language type. They are based on objects.\n\nSo `typeof` does not help to distinguish a plain object from an array:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nalert(typeof {}); // object\nalert(typeof []); // object (same)\n```\n\n…But arrays are used so often that there’s a special method for that: [Array.isArray(value)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray). It returns `true` if the `value` is an array, and `false` otherwise.\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nalert(Array.isArray({})); // false\n\nalert(Array.isArray([])); // true\n```\n\n## [Most methods support “thisArg”](https://javascript.info/array-methods#most-methods-support-thisarg)\n\nAlmost all array methods that call functions – like `find`, `filter`, `map`, with a notable exception of `sort`, accept an optional additional parameter `thisArg`.\n\nThat parameter is not explained in the sections above, because it’s rarely used. But for completeness we have to cover it.\n\nHere’s the full syntax of these methods:\n\n```javascript\narr.find(func, thisArg);\narr.filter(func, thisArg);\narr.map(func, thisArg);\n// ...\n// thisArg is the optional last argument\n```\n\nThe value of `thisArg` parameter becomes `this` for `func`.\n\nFor example, here we use a method of `army` object as a filter, and `thisArg` passes the context:\n\n[](https://javascript.info/array-methods# \"run\")\n\n[](https://javascript.info/array-methods# \"open in sandbox\")\n\n```javascript\nlet army = {\n  minAge: 18,\n  maxAge: 27,\n  canJoin(user) {\n    return user.age \u003e= this.minAge \u0026\u0026 user.age \u003c this.maxAge;\n  }\n};\n\nlet users = [\n  {age: 16},\n  {age: 20},\n  {age: 23},\n  {age: 30}\n];\n\n// find users, for who army.canJoin returns true\nlet soldiers = users.filter(army.canJoin, army);\n\nalert(soldiers.length); // 2\nalert(soldiers[0].age); // 20\nalert(soldiers[1].age); // 23\n```\n\nIf in the example above we used `users.filter(army.canJoin)`, then `army.canJoin` would be called as a standalone function, with `this=undefined`, thus leading to an instant error.\n\nA call to `users.filter(army.canJoin, army)` can be replaced with `users.filter(user =\u003e army.canJoin(user))`, that does the same. The latter is used more often, as it’s a bit easier to understand for most people.\n\n## [Summary](https://javascript.info/array-methods#summary)\n\nA cheat sheet of array methods:\n\n-   To add/remove elements:\n    \n    -   `push(...items)` – adds items to the end,\n    -   `pop()` – extracts an item from the end,\n    -   `shift()` – extracts an item from the beginning,\n    -   `unshift(...items)` – adds items to the beginning.\n    -   `splice(pos, deleteCount, ...items)` – at index `pos` deletes `deleteCount` elements and inserts `items`.\n    -   `slice(start, end)` – creates a new array, copies elements from index `start` till `end` (not inclusive) into it.\n    -   `concat(...items)` – returns a new array: copies all members of the current one and adds `items`to it. If any of `items` is an array, then its elements are taken.\n-   To search among elements:\n    \n    -   `indexOf/lastIndexOf(item, pos)` – look for `item` starting from position `pos`, return the index or `-1` if not found.\n    -   `includes(value)` – returns `true` if the array has `value`, otherwise `false`.\n    -   `find/filter(func)` – filter elements through the function, return first/all values that make it return `true`.\n    -   `findIndex` is like `find`, but returns the index instead of a value.\n-   To iterate over elements:\n    \n    -   `forEach(func)` – calls `func` for every element, does not return anything.\n-   To transform the array:\n    \n    -   `map(func)` – creates a new array from results of calling `func` for every element.\n    -   `sort(func)` – sorts the array in-place, then returns it.\n    -   `reverse()` – reverses the array in-place, then returns it.\n    -   `split/join` – convert a string to array and back.\n    -   `reduce/reduceRight(func, initial)` – calculate a single value over the array by calling `func`for each element and passing an intermediate result between the calls.\n-   Additionally:\n    \n    -   `Array.isArray(value)` checks `value` for being an array, if so returns `true`, otherwise `false`.\n\nPlease note that methods `sort`, `reverse` and `splice` modify the array itself.\n\nThese methods are the most used ones, they cover 99% of use cases. But there are few others:\n\n-   [arr.some(fn)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)/[arr.every(fn)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every) check the array.\n    \n    The function `fn` is called on each element of the array similar to `map`. If any/all results are `true`, returns `true`, otherwise `false`.\n    \n    These methods behave sort of like `||` and `\u0026\u0026` operators: if `fn` returns a truthy value, `arr.some()`immediately returns `true` and stops iterating over the rest of items; if `fn` returns a falsy value, `arr.every()` immediately returns `false` and stops iterating over the rest of items as well.\n    \n    We can use `every` to compare arrays:\n    \n    [](https://javascript.info/array-methods# \"run\")\n    \n    [](https://javascript.info/array-methods# \"open in sandbox\")\n    \n    ```javascript\n    function arraysEqual(arr1, arr2) {\n      return arr1.length === arr2.length \u0026\u0026 arr1.every((value, index) =\u003e value === arr2[index]);\n    }\n    \n    alert( arraysEqual([1, 2], [1, 2])); // true\n    ```\n    \n-   [arr.fill(value, start, end)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill) – fills the array with repeating `value` from index `start` to `end`.\n    \n-   [arr.copyWithin(target, start, end)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin) – copies its elements from position `start` till position `end` into _itself_, at position `target` (overwrites existing).\n    \n-   [arr.flat(depth)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)/[arr.flatMap(fn)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) create a new flat array from a multidimensional array.\n    \n\nFor the full list, see the [manual](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n\nFrom the first sight it may seem that there are so many methods, quite difficult to remember. But actually that’s much easier.\n\nLook through the cheat sheet just to be aware of them. Then solve the tasks of this chapter to practice, so that you have experience with array methods.\n\nAfterwards whenever you need to do something with an array, and you don’t know how – come here, look at the cheat sheet and find the right method. Examples will help you to write it correctly. Soon you’ll automatically remember the methods, without specific efforts from your side.\n\n---\nReferences:\n- ","lastmodified":"2023-07-13T10:11:59.125362952Z","tags":["javascript"]},"/Javascript-Classes":{"title":"Javascript Classes","content":"-----------------\nDate Created : `21-01-2023`\n\nTags: #javascript, #publish \n\n\n----------------------------\n# `Javascript Classes`.\n## Introduction\nSo, what exactly is a `class`? That’s not an entirely new language-level entity, as one might think.\n\nLet’s unveil any magic and see what a class really is. That’ll help in understanding many complex aspects.\n\nIn JavaScript, a class is a kind of function.\n\nHere, take a look:\n\n```javascript\nclass User {\n  constructor(name) { this.name = name; }\n  sayHi() { alert(this.name); }\n}\n\n// proof: User is a function\nalert(typeof User); // function\n```\n\n## Not just a syntactic sugar\n\nSometimes people say that `class` is a “syntactic sugar” (syntax that is designed to make things easier to read, but doesn’t introduce anything new), because we could actually declare the same thing without using the `class` keyword at all:\n\n```javascript\n// rewriting class User in pure functions\n\n// 1. Create constructor function\nfunction User(name) {\n  this.name = name;\n}\n// a function prototype has \"constructor\" property by default,\n// so we don't need to create it\n\n// 2. Add the method to prototype\nUser.prototype.sayHi = function() {\n  alert(this.name);\n};\n\n// Usage:\nlet user = new User(\"John\");\nuser.sayHi();\n```\n\nThe result of this definition is about the same. So, there are indeed reasons why `class` can be considered a syntactic sugar to define a constructor together with its prototype methods.\n\nStill, there are important differences.\n\n1.  First, a function created by `class` is labelled by a special internal property `[[IsClassConstructor]]: true`. So it’s not entirely the same as creating it manually.\n    \n    The language checks for that property in a variety of places. For example, unlike a regular function, it must be called with `new`:\n    \n    ```javascript\n    class User {\n      constructor() {}\n    }\n    \n    alert(typeof User); // function\n    User(); // Error: Class constructor User cannot be invoked without 'new'\n    ```\n    \n    Also, a string representation of a class constructor in most JavaScript engines starts with the “class…”\n\n    ```javascript\n    class User {\n      constructor() {}\n    }\n    \n    alert(User); // class User { ... }\n    ```\n    \n    There are other differences, we’ll see them soon.\n    \n2.  Class methods are non-enumerable. A class definition sets `enumerable` flag to `false` for all methods in the `\"prototype\"`.\n    \n    That’s good, because if we `for..in` over an object, we usually don’t want its class methods.\n    \n3.  Classes always `use strict`. All code inside the class construct is automatically in strict mode.\n\nWhat `class User {...}` construct really does is:\n\n1.  Creates a function named `User`, that becomes the result of the class declaration. The function code is taken from the `constructor` method (assumed empty if we don’t write such method).\n2.  Stores class methods, such as `sayHi`, in `User.prototype`.\n## Features\n-   Classes create objects through the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator.\n-   Each object has some properties (data or method) added by the class.\n-   The class stores some properties (data or method) itself, which are usually used to interact with instances.\n```javascript\nclass MyClass {\n  // Constructor\n  constructor() {\n    // Constructor body\n  }\n  // Instance field\n  myField = \"foo\";\n  // Instance method\n  myMethod() {\n    // myMethod body\n  }\n  // Static field\n  static myStaticField = \"bar\";\n  // Static method\n  static myStaticMethod() {\n    // myStaticMethod body\n  }\n  // Static block\n  static {\n    // Static initialization code\n  }\n  // Fields, methods, static fields, and static methods all have\n  // \"private\" forms\n  #myPrivateField = \"bar\";\n}\n```\n- The folowing code is equivalent to\n```javascript\nfunction MyClass() {\n  this.myField = \"foo\";\n  // Constructor body\n}\nMyClass.myStaticField = \"bar\";\nMyClass.myStaticMethod = function () {\n  // myStaticMethod body\n};\nMyClass.prototype.myMethod = function () {\n  // myMethod body\n};\n\n(function () {\n  // Static initialization code\n})();\n```\n## Class Expression\nHere is an example\n```javascript\nconst MyClass = class MyClassLongerName {\n  // Class body. Here MyClass and MyClassLongerName point to the same class.\n};\nnew MyClassLongerName(); // ReferenceError: MyClassLongerName is not defined\n```\n## Constructor\nCan be a of three types:\n- Default constructor with no argument\n- parameterized constructor with some argument/s\n- custom constructor without es6 syntactic sugar\n```javascript\nclass Color {\n  constructor(r, g, b) {\n    // Assign the RGB values as a property of `this`.\n    this.values = [r, g, b];\n  }\n}\n\n//Equivalent to\n\nfunction createColor(r, g, b) {\n  return {\n    values: [r, g, b],\n  };\n}\n\n```\n## Instance Methods\n```javascript\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n  }\n  getRed() {\n    return this.values[0];\n  }\n}\n\nconst red = new Color(255, 0, 0);\nconsole.log(red.getRed()); // 255\n```\n- Method within constructors also works but it wastes memory\n## Private Fields\n- use `#value` within class to declare private fields\n- Can `only be accessed and modified by class methods`\n- `One instance` of the same class `can access` private `fields of other instance`\n- Same private field` cant be declared twice`\n- Methods, getters and setters can be private as well and can be useful for internal methods which needs to be encapsulated\n## Static  Properties\n- [_Static properties_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) are a group of class features that are `defined on the class itself,` rather than on individual instances of the class. \n- These features include:\n\t- `Static methods`\n\t- `Static fields`\n\t- `Static getters and setters`\n- Similar to java static in which `no need to instanciate a class to use static members`, infact here `instances cannot access them`\n- They are not accessible from instances.\nThere is also a special construct called a [_static initialization block_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks), which is a block of code that runs when the class is first loaded.\n\n```javascript\nclass MyClass {\n  static const a = 10;\n  constructor() {\n\t  this.b = 20;\n  }\n  static {\n    MyClass.myStaticProperty = \"foo\";\n  }\n}\n\nconsole.log(MyClass.myStaticProperty); // 'foo'\n\nlet newClass = new MyClass();\nconsole.log(newClass.a);//THrows error since a is a static member\n```\n\n## Extends \u0026 Inheritence\n- The derived class has access to all public properties of the parent class. \n- Any constructor that can be called with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) and has the [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property can be the candidate for the parent class.\n- In JavaScript, derived classes are declared with an [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends) clause, which indicates the class it extends from.\n```javascript\nclass Color {\n  #values;\n  constructor(r, g, b, a = 1) {\n    this.#values = [r, g, b, a];\n  }\n  get alpha() {\n    return this.#values[3];\n  }\n  set alpha(value) {\n    if (value \u003c 0 || value \u003e 1) {\n      throw new RangeError(\"Alpha value must be between 0 and 1\");\n    }\n    this.#values[3] = value;\n  }\n}\n\nclass ColorWithAlpha extends Color {\n  #alpha;\n  constructor(r, g, b, a) {\n    super(r, g, b);\n    this.#alpha = a;\n  }\n  get alpha() {\n    return this.#alpha;\n  }\n  set alpha(value) {\n    if (value \u003c 0 || value \u003e 1) {\n      throw new RangeError(\"Alpha value must be between 0 and 1\");\n    }\n    this.#alpha = value;\n  }\n}\n```\n\nThere are a few things that have immediately come to attention.\n\t - First is that in the constructor, we are calling `super(r, g, b)`. It is a language requirement to call [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) before accessing `this`. \n\t - The `super()` call calls the parent class's constructor to initialize `this` — here it's roughly equivalent to `this = new Color(r, g, b)`. \n\t - You can have code before `super()`, but you cannot access `this` before `super()` — the language prevents you from accessing the uninitialized `this`.\n\n- `Derived classes can also override methods from the parent class.`\n\n- Within derived classes, you can `access the parent class's methods` by using `super`. This allows you to build enhancement methods and avoid code duplication.\n\n- When you use `extends`, the `static methods` inherit from each other as well, so you `can also override` or enhance them. `This is opposite in case of JAVA where static members cannot be overriden.\n`\n- `Derived `classes `don't have access` to the `parent` class's `private fields`\n\n- A class can only extend from one class.\n\n\n\n\n---\nReferences:\n- ","lastmodified":"2023-07-13T10:11:59.125362952Z","tags":["javascript"]},"/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (测试)","content":"\n## Chinese, Japanese, Korean Support\n几乎在我们意识到之前，我们已经离开了地面。\n\n우리가 그것을 알기도 전에 우리는 땅을 떠났습니다.\n\n私たちがそれを知るほぼ前に、私たちは地面を離れていました。\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = -1$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/config.md) page.\n","lastmodified":"2023-07-13T10:11:59.165363134Z","tags":[]},"/notes/callouts":{"title":"Callouts","content":"\n## Callout support\n\nQuartz supports the same Admonition-callout syntax as Obsidian.\n\nThis includes\n- 12 Distinct callout types (each with several aliases)\n- Collapsable callouts\n\nSee [documentation on supported types and syntax here](https://help.obsidian.md/Editing+and+formatting/Callouts).\n\n## Showcase\n\n\u003e [!EXAMPLE] Examples\n\u003e\n\u003e Aliases: example\n\n\u003e [!note] Notes\n\u003e\n\u003e Aliases: note\n\n\u003e [!abstract] Summaries \n\u003e\n\u003e Aliases: abstract, summary, tldr\n\n\u003e [!info] Info \n\u003e\n\u003e Aliases: info, todo\n\n\u003e [!tip] Hint \n\u003e\n\u003e Aliases: tip, hint, important\n\n\u003e [!success] Success \n\u003e\n\u003e Aliases: success, check, done\n\n\u003e [!question] Question \n\u003e\n\u003e Aliases: question, help, faq\n\n\u003e [!warning] Warning \n\u003e\n\u003e Aliases: warning, caution, attention\n\n\u003e [!failure] Failure \n\u003e\n\u003e Aliases: failure, fail, missing\n\n\u003e [!danger] Error\n\u003e\n\u003e Aliases: danger, error\n\n\u003e [!bug] Bug\n\u003e\n\u003e Aliases: bug\n\n\u003e [!quote] Quote\n\u003e\n\u003e Aliases: quote, cite\n","lastmodified":"2023-07-13T10:11:59.165363134Z","tags":[]},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Jacky Zhao\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to render mermaid diagrams\nenableMermaid: true\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nsearch:\n  enableSemanticSearch: false\n  operandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n  operandIndexId: \"REPLACE-WITH-YOUR-OPERAND-INDEX-ID\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"🪴 Quartz 3.3\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2023-07-13T10:11:59.165363134Z","tags":["setup"]},"/notes/custom-Domain":{"title":"Custom Domain","content":"\n### Registrar\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\n\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\n\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\n\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/quartz`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\n\n\t![Example Configuration for Quartz](/notes/images/google-domains.png)*Example Configuration for Quartz*\n3. Wait 30 minutes to an hour for the network changes to kick in.\n4. Done!","lastmodified":"2023-07-13T10:11:59.165363134Z","tags":[]},"/notes/docker":{"title":"Hosting with Docker","content":"\nIf you want to host Quartz on a machine without using a webpage hosting service, it may be easier to [install Docker Compose](https://docs.docker.com/compose/install/) and follow the instructions below than to [install Quartz's dependencies manually](notes/preview%20changes.md).\n## Hosting Quartz Locally\nYou can serve Quartz locally at `http://localhost:1313` with the following script, replacing `/path/to/quartz` with the \nactual path to your Quartz folder.\n\ndocker-compose.yml\n```\nservices:\n  quartz-hugo:\n    image: ghcr.io/jackyzha0/quartz:hugo\n    container_name: quartz-hugo\n    volumes:\n      - /path/to/quartz:/quartz\n    ports:\n      - 1313:1313\n\n    # optional\n    environment:\n      - HUGO_BIND=0.0.0.0\n      - HUGO_BASEURL=http://localhost\n      - HUGO_PORT=1313\n      - HUGO_APPENDPORT=true\n      - HUGO_LIVERELOADPORT=-1\n```\n\nThen run with: `docker-compose up -d` in the same directory as your `docker-compose.yml` file.\n\nWhile the container is running, you can update the `quartz` fork with: `docker exec -it quartz-hugo make update`.\n\n## Exposing Your Container to the Internet\n\n### To Your Public IP Address with Port Forwarding (insecure)\n\nAssuming you are already familiar with [port forwarding](https://en.wikipedia.org/wiki/Port_forwarding) and [setting it up with your router model](https://portforward.com):\n\n1. You should set the environment variable `HUGO_BASEURL=http://your-public-ip` and then start your container.\n2. Set up port forwarding on your router from port `p` to `your-local-ip:1313`.\n3. You should now be able to access Quartz from outside your local network at `http://your-public-ip:p`.\n\nHowever, your HTTP connection will be unencrypted and **this method is not secure**.\n\n### To a Domain using Cloudflare Proxy\n\n1. Port forward 443 (HTTPS) from your machine.\n2. Buy a custom domain (say, `your-domain.com`) from [Cloudflare](https://www.cloudflare.com/products/registrar/). Point a DNS A record from `your-domain.com` to your public IP address and enable the proxy.\n3. Set the environment variables `HUGO_BASEURL=https://your-domain.com`, `HUGO_PORT=443`, and `HUGO_APPENDPORT=false`. Change `1313:1313` to `443:443` for the `ports` in `docker-compose.yml`.\n4. Spin up your Quartz container and enjoy it at `https://your-domain.com`!\n\n### To a Domain using a Reverse Proxy\n\nIf you want to serve more than just Quartz to the internet on this machine (or don't want to use the Cloudflare registrar and proxy), you should follow the steps in the section above (as appropriate) and also set up a reverse proxy, like [Traefik](https://doc.traefik.io/traefik). Be sure to configure your TLS certificates too!\n","lastmodified":"2023-07-13T10:11:59.165363134Z","tags":["setup"]},"/notes/editing":{"title":"Editing Content in Quartz","content":"\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.**\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so, otherwise the generated page will not have a title!\n\nYou can also add tags here as well.\n\n```yaml\n---\ntitle: \"Example Title\"\ntags:\n- example-tag\n---\n\nRest of your content here...\n```\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\n\u003e 🔗 Step 3: [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n## Previewing Changes\nThis step is purely optional and mostly for those who want to see the published version of their digital garden locally before opening it up to the internet. This is *highly recommended* but not required.\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n\nFor those who like to live life more on the edge, viewing the garden through Obsidian gets you pretty close to the real thing.\n\n## Publishing Changes\nNow that you know the basics of managing your digital garden using Quartz, you can publish it to the internet!\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-07-13T10:11:59.165363134Z","tags":["setup"]},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"\n## Hosting on GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions Permissions\nBy default, GitHub disables workflows from modifying your files (for good reason!). However, Quartz needs this to write the actual site files back to GitHub.\n\nHead to `Settings \u003e Action \u003e General \u003e Workflow Permissions` and choose `Read and Write Permissions`\n\n![[notes/images/github-actions.png]]\n*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`. \n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`. **You need to do this especially if you are using GitHub!**\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml {title=\".github/workflows/deploy.yaml\"}\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n❌ [Excluding pages from being published](notes/ignore%20notes.md)\n\n## Docker Support\nIf you don't want to use a hosting service, you can host using [Docker](notes/docker.md) instead!\nI would *not use this method* unless you know what you are doing.\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\n\u003e Step 6: 🎨 [Customizing Quartz](notes/config.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-07-13T10:11:59.165363134Z","tags":["setup"]},"/notes/ignore-notes":{"title":"Ignoring Notes","content":"\n### Quartz Ignore\nEdit `ignoreFiles` in `config.toml` to include paths you'd like to exclude from being rendered.\n\n```toml\n...\nignoreFiles = [  \n    \"/content/templates/*\",  \n    \"/content/private/*\", \n    \"\u003cyour path here\u003e\"\n]\n```\n\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\n\n```markdown\n---\ntitle: Some Private Note\ndraft: true\n---\n...\n```\n\nMore details in [Hugo's documentation](https://gohugo.io/getting-started/configuration/#ignore-content-and-data-files-when-rendering).\n\n### Global Ignore\nHowever, just adding to the `ignoreFiles` will only prevent the page from being access through Quartz. If you want to prevent the file from being pushed to GitHub (for example if you have a public repository), you need to also add the path to the `.gitignore` file at the root of the repository.","lastmodified":"2023-07-13T10:11:59.165363134Z","tags":[]},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"\n## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\nOpen Settings \u003e Files \u0026 Links and look for these two items:\n\n1. Set the **New link format** to **Absolute Path in vault**. If you have a completely flat vault (no folders), this step isn't necessary.\n2. Turn **on** the **Automatically update internal links** setting.\n\n\n![[notes/images/obsidian-settings.png]]*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n\u003e [!WARNING]\n\u003e \n\u003e **If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n","lastmodified":"2023-07-13T10:11:59.169363152Z","tags":["setup"]},"/notes/philosophy":{"title":"Quartz Philosophy","content":"\n\u003e “[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.” — Richard Hamming\n\n## Why Quartz?\nHosting a public digital garden isn't easy. There are an overwhelming number of tutorials, resources, and guides for tools like [Notion](https://www.notion.so/), [Roam](https://roamresearch.com/), and [Obsidian](https://obsidian.md/), yet none of them have super easy to use *free* tools to publish that garden to the world.\n\nI've personally found that\n1. It's nice to access notes from anywhere\n2. Having a public digital garden invites open conversations\n3. It makes keeping personal notes and knowledge *playful and fun*\n\nI was really inspired by [Bianca](https://garden.bianca.digital/) and [Joel](https://joelhooks.com/digital-garden)'s digital gardens and wanted to try making my own.\n\n**The goal of Quartz is to make hosting your own public digital garden free and simple.** You don't even need your own website. Quartz does all of that for you and gives your own little corner of the internet.\n","lastmodified":"2023-07-13T10:11:59.169363152Z","tags":[]},"/notes/preview-changes":{"title":"Preview Changes","content":"\nIf you'd like to preview what your Quartz site looks like before deploying it to the internet, the following\ninstructions guide you through installing the proper dependencies to run it locally.\n\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```bash\n# Install and link `hugo-obsidian` locally\ngo install github.com/jackyzha0/hugo-obsidian@latest\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly (see [[notes/troubleshooting#`command not found: hugo-obsidian`|the troubleshooting page]])! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```bash\n# Navigate to your local Quartz folder\ncd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\nmake serve\n\n# View your site in a browser at http://localhost:1313/\n```\n\n\u003e [!INFO] Docker Support\n\u003e\n\u003e If you have the Docker CLI installed already, you can avoid installing `hugo-obsidian` and `hugo`. Instead, open your terminal, navigate to your folder with Quartz and run `make docker`\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated! Now, let's get it hosted online.\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n","lastmodified":"2023-07-13T10:11:59.169363152Z","tags":["setup"]},"/notes/search":{"title":"Search","content":"\nQuartz supports two modes of searching through content.\n\n## Full-text\nFull-text search is the default in Quartz. It produces results that *exactly* match the search query. This is easier to setup but usually produces lower quality matches.\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nenableSemanticSearch: false\n```\n\n## Natural Language\nNatural language search is powered by [Operand](https://beta.operand.ai/). It understands language like a person does and finds results that best match user intent. In this sense, it is closer to how Google Search works.\n\nNatural language search tends to produce higher quality results than full-text search.\n\nHere's how to set it up.\n\n1. Login or Register for a new Operand account. Click the verification link sent to your email, and you'll be redirected to the dashboard. (Note) You do not need to enter a credit card to create an account, or get started with the Operand API. The first $10 of usage each month is free. To learn more, see pricing. If you go over your free quota, we'll (politely) reach out and ask you to configure billing.\n2. Create your first index. On the dashboard, under \"Indexes\", enter the name and description of your index, and click \"Create Index\". Note down the ID of the index (obtained by clicking on the index name in the list of indexes), as you'll need it in the next step. IDs are unique to each index, and look something like `uqv1duxxbdxu`.\n3. Click into the index you've created. Under \"Index Something\", select \"SITEMAP\" from the dropdown and click \"Add Source\".\n4. For the \"Sitemap.xml URL\", put your deployed site's base URL followed by `sitemap.xml`. For example, for `quartz.jzhao.xyz`, put `https://quartz.jzhao.xyz/sitemap.xml`. Leave the URL Regex empty. \n5. Get your API key. On the dashboard, under \"API Keys\", you can manage your API keys. If you don't already have an API key, click \"Create API Key\". You'll need this for the next step.\n6. Open `data/config.yaml`. Set `enableSemanticSearch` to `true`, `operandApiKey` to your copied key, and `operandIndexId` to the ID of the index we created from earlier..\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nsearch:\n  enableSemanticSearch: true\n  operandApiKey: \"jp9k5hudse2a828z98kxd6z3payi8u90rnjf\"\n  operandIndexId: \"s0kf3bd6tldw\"\n```\n7. Push your changes to the site and wait for it to deploy.\n8. Check the Operand dashboard and wait for your site to index. Enjoy natural language search powered by Operand!\n","lastmodified":"2023-07-13T10:11:59.169363152Z","tags":[]},"/notes/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\n📁 [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. **Make sure that when you fork, you _uncheck_ the 'Copy the `hugo` branch only' option**.\n\nIf you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n![[notes/images/fork.png]]\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command in your terminal replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\ngit clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n\u003e ✏️ Step 2: [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-07-13T10:11:59.169363152Z","tags":["setup"]},"/notes/showcase":{"title":"Showcase","content":"\nWant to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://jzhao.xyz/)\n- [Scaling Synthesis - A hypertext research notebook](https://scalingsynthesis.com/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n- [Data Dictionary 🧠](https://glossary.airbyte.com/)\n- [sspaeti.com's Second Brain](https://brain.sspaeti.com/)\n- [oldwinterの数字花园](https://garden.oldwinter.top/)\n- [SethMB Work](https://sethmb.xyz/)\n- [Abhijeet's Math Wiki](https://abhmul.github.io/quartz/Math-Wiki/)\n- [Mike's AI Garden 🤖🪴](https://mwalton.me/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!\n","lastmodified":"2023-07-13T10:11:59.169363152Z","tags":[]},"/notes/troubleshooting":{"title":"Troubleshooting and FAQ","content":"\nStill having trouble? Here are a list of common questions and problems people encounter when installing Quartz.\n\nWhile you're here, join our [Discord](https://discord.gg/cRFFHYye7t) :)\n\n### Does Quartz have Latex support?\nYes! See [CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) for a brief demo.\n\n### Can I use \\\u003cObsidian Plugin\\\u003e in Quartz?\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Quartz.\n\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\n\n### My GitHub pages is just showing the README and not Quartz\nMake sure you set the source to deploy from `master` (and not `hugo`) using `/ (root)`! See more in the [hosting](/notes/hosting) guide\n\n### Some of my pages have 'January 1, 0001' as the last modified date\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Quartz by running this command.\n\n```shell\n# in the root of your Quartz (same folder as config.toml)\ngit config core.ignorecase true\n\n# or globally (not recommended)\ngit config --global core.ignorecase true\n```\n\n### Can I publish only a subset of my pages?\nYes! Quartz makes selective publishing really easy. Heres a guide on [excluding pages from being published](notes/ignore%20notes.md).\n\n### Can I host this myself and not on GitHub Pages?\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](notes/hosting.md).\n\n### `command not found: hugo-obsidian`\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\n\n```shell\n# Add the following 2 lines to your ~/.bash_profile (~/.zshrc if you are on Mac)\nexport GOPATH=/Users/$USER/go\nexport PATH=$GOPATH/bin:$PATH\n\n# In your current terminal, to reload the session\nsource ~/.bash_profile # again, (~/.zshrc if you are on Mac)\n```\n\n### How come my notes aren't being rendered?\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](notes/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](notes/editing.md).\n\n### My custom domain isn't working!\nWalk through the steps in [the hosting guide](notes/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\n\n### How do I setup analytics?\nQuartz by default uses [Plausible](https://plausible.io/) for analytics. \n\nIf you would prefer to use Google Analytics, you can follow this [guide in the Hugo documentation](https://gohugo.io/templates/internal/#google-analytics). \n\nAlternatively, you can also import your Google Analytics data into Plausible by [following this guide](https://plausible.io/docs/google-analytics-import).\n\n\n### How do I change the content on the home page?\nTo edit the main home page, open `/content/_index.md`.\n\n### How do I change the colours?\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](notes/config.md).\n\n### How do I add images?\nYou can put images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### My Interactive Graph and Backlinks aren't up to date\nBy default, the `linkIndex.json` (which Quartz needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](notes/editing.md)\n\n### Can I use React/Vue/some other framework?\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Quartz is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\n\n## Still Stuck?\nQuartz isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, you can message me on [Twitter](https://twitter.com/_jzhao) and I'll try to get back to you as soon as I can.\n\n🐛 [Submit an Issue](https://github.com/jackyzha0/quartz/issues)\n","lastmodified":"2023-07-13T10:11:59.169363152Z","tags":[]},"/notes/updating":{"title":"Updating","content":"\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n```\n\nOr, if you don't want the interactive parts and just want to force update your local garden (this assumed that you are okay with some of your personalizations been overriden!)\n\n```shell\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e [!warning] Warning!\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```\n","lastmodified":"2023-07-13T10:11:59.169363152Z","tags":[]}}